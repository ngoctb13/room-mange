// Code generated by ent, DO NOT EDIT.

package booking

import (
	"room-reservation/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldID, id))
}

// Information applies equality check predicate on the "information" field. It's identical to InformationEQ.
func Information(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldInformation, v))
}

// StartHour applies equality check predicate on the "start_hour" field. It's identical to StartHourEQ.
func StartHour(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldStartHour, v))
}

// EndHour applies equality check predicate on the "end_hour" field. It's identical to EndHourEQ.
func EndHour(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldEndHour, v))
}

// BookingDate applies equality check predicate on the "booking_date" field. It's identical to BookingDateEQ.
func BookingDate(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingDate, v))
}

// InformationEQ applies the EQ predicate on the "information" field.
func InformationEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldInformation, v))
}

// InformationNEQ applies the NEQ predicate on the "information" field.
func InformationNEQ(v string) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldInformation, v))
}

// InformationIn applies the In predicate on the "information" field.
func InformationIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldInformation, vs...))
}

// InformationNotIn applies the NotIn predicate on the "information" field.
func InformationNotIn(vs ...string) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldInformation, vs...))
}

// InformationGT applies the GT predicate on the "information" field.
func InformationGT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldInformation, v))
}

// InformationGTE applies the GTE predicate on the "information" field.
func InformationGTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldInformation, v))
}

// InformationLT applies the LT predicate on the "information" field.
func InformationLT(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldInformation, v))
}

// InformationLTE applies the LTE predicate on the "information" field.
func InformationLTE(v string) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldInformation, v))
}

// InformationContains applies the Contains predicate on the "information" field.
func InformationContains(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContains(FieldInformation, v))
}

// InformationHasPrefix applies the HasPrefix predicate on the "information" field.
func InformationHasPrefix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasPrefix(FieldInformation, v))
}

// InformationHasSuffix applies the HasSuffix predicate on the "information" field.
func InformationHasSuffix(v string) predicate.Booking {
	return predicate.Booking(sql.FieldHasSuffix(FieldInformation, v))
}

// InformationEqualFold applies the EqualFold predicate on the "information" field.
func InformationEqualFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldEqualFold(FieldInformation, v))
}

// InformationContainsFold applies the ContainsFold predicate on the "information" field.
func InformationContainsFold(v string) predicate.Booking {
	return predicate.Booking(sql.FieldContainsFold(FieldInformation, v))
}

// StartHourEQ applies the EQ predicate on the "start_hour" field.
func StartHourEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldStartHour, v))
}

// StartHourNEQ applies the NEQ predicate on the "start_hour" field.
func StartHourNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldStartHour, v))
}

// StartHourIn applies the In predicate on the "start_hour" field.
func StartHourIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldStartHour, vs...))
}

// StartHourNotIn applies the NotIn predicate on the "start_hour" field.
func StartHourNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldStartHour, vs...))
}

// StartHourGT applies the GT predicate on the "start_hour" field.
func StartHourGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldStartHour, v))
}

// StartHourGTE applies the GTE predicate on the "start_hour" field.
func StartHourGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldStartHour, v))
}

// StartHourLT applies the LT predicate on the "start_hour" field.
func StartHourLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldStartHour, v))
}

// StartHourLTE applies the LTE predicate on the "start_hour" field.
func StartHourLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldStartHour, v))
}

// EndHourEQ applies the EQ predicate on the "end_hour" field.
func EndHourEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldEndHour, v))
}

// EndHourNEQ applies the NEQ predicate on the "end_hour" field.
func EndHourNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldEndHour, v))
}

// EndHourIn applies the In predicate on the "end_hour" field.
func EndHourIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldEndHour, vs...))
}

// EndHourNotIn applies the NotIn predicate on the "end_hour" field.
func EndHourNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldEndHour, vs...))
}

// EndHourGT applies the GT predicate on the "end_hour" field.
func EndHourGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldEndHour, v))
}

// EndHourGTE applies the GTE predicate on the "end_hour" field.
func EndHourGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldEndHour, v))
}

// EndHourLT applies the LT predicate on the "end_hour" field.
func EndHourLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldEndHour, v))
}

// EndHourLTE applies the LTE predicate on the "end_hour" field.
func EndHourLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldEndHour, v))
}

// BookingDateEQ applies the EQ predicate on the "booking_date" field.
func BookingDateEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldEQ(FieldBookingDate, v))
}

// BookingDateNEQ applies the NEQ predicate on the "booking_date" field.
func BookingDateNEQ(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNEQ(FieldBookingDate, v))
}

// BookingDateIn applies the In predicate on the "booking_date" field.
func BookingDateIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldIn(FieldBookingDate, vs...))
}

// BookingDateNotIn applies the NotIn predicate on the "booking_date" field.
func BookingDateNotIn(vs ...time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldNotIn(FieldBookingDate, vs...))
}

// BookingDateGT applies the GT predicate on the "booking_date" field.
func BookingDateGT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGT(FieldBookingDate, v))
}

// BookingDateGTE applies the GTE predicate on the "booking_date" field.
func BookingDateGTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldGTE(FieldBookingDate, v))
}

// BookingDateLT applies the LT predicate on the "booking_date" field.
func BookingDateLT(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLT(FieldBookingDate, v))
}

// BookingDateLTE applies the LTE predicate on the "booking_date" field.
func BookingDateLTE(v time.Time) predicate.Booking {
	return predicate.Booking(sql.FieldLTE(FieldBookingDate, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.Booking {
	return predicate.Booking(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Booking) predicate.Booking {
	return predicate.Booking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Booking) predicate.Booking {
	return predicate.Booking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Booking) predicate.Booking {
	return predicate.Booking(sql.NotPredicates(p))
}
