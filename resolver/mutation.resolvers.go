package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"room-reservation/ent"
	graphql1 "room-reservation/graphql"
	"strconv"
)

// CreateBooking is the resolver for the createBooking field.
func (r *mutationResolver) CreateBooking(ctx context.Context, input ent.CreateBookingInput) (*ent.Booking, error) {
	return r.serviceRegistry.Booking().CreateBooking(ctx, input)
}

// UpdateBooking is the resolver for the updateBooking field.
func (r *mutationResolver) UpdateBooking(ctx context.Context, id string, input ent.UpdateBookingInput) (*ent.Booking, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid id format: %v", err)
	}

	return r.serviceRegistry.Booking().UpdateBooking(ctx, intID, input)
}

// DeleteBooking is the resolver for the deleteBooking field.
func (r *mutationResolver) DeleteBooking(ctx context.Context, id string) (*ent.Booking, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid id format: %v", err)
	}

	return r.serviceRegistry.Booking().DeleteBooking(ctx, intID)
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
